kind of optymalized but losing on its precision

const mixedThreePairs = async (req) => {
   const { ratio = '4-4-2', sliceStart = 0, sliceEnd = 10 } = req.query;
   let amount1 = Number(ratio[0]);
   let amount2 = Number(ratio[2]);
   let amount3 = Number(ratio[4]);
   if (amount1 == undefined || amount2 == undefined || amount3 == undefined || amount1 + amount2 + amount3 != 10) {
      amount1 = 4;
      amount2 = 4;
      amount3 = 2;
   }
   let x = [];

   let counter = 0;
   let profits = [];

   const sliceFrom = Number(sliceStart);
   const sliceTo = Number(sliceEnd);

   let collections = await Case.find({})
      .populate({ path: 'skins', populate: { path: 'grey', model: 'Skin' } })
      .populate({ path: 'skins', populate: { path: 'light_blue', model: 'Skin' } })
      .populate({ path: 'skins', populate: { path: 'blue', model: 'Skin' } })
      .populate({ path: 'skins', populate: { path: 'purple', model: 'Skin' } })
      .populate({ path: 'skins', populate: { path: 'pink', model: 'Skin' } })
      .populate({ path: 'skins', populate: { path: 'red', model: 'Skin' } });


   collections = collections.slice(sliceFrom, sliceTo);
   // const nOfSkins = {};
   // for (let collection of collections) {
   //    nOfSkins[collection.name] = {
   //       grey: collection.skins.grey.length,
   //       light_blue: collection.skins.light_blue.length,
   //       blue: collection.skins.blue.length,
   //       purple: collection.skins.purple.length,
   //       pink: collection.skins.pink.length,
   //       red: collection.skins.red.length,
   //    }
   // }

   // PRZESZUKIWANIE W STOSUNKU RATIO (SKINS COOPERATIVESKIN)
   for (let r = 0; r < rarities.length - 1; r++) {
      for (let collection of collections) {

         // for (let skin of collection.skins[rarities[r]]) {
         //    if (collection.skins[rarities[r + 1]].length !== 0) {

         if (collection.skins[rarities[r + 1]].length !== 0) {
            for (let quality of qualities) {
               const skin = findCheapestSkin(collection, rarities[r], quality);
               // const skinId = skin._id;
               // for (let skin of collection.skins[rarities[r]]) {
               // const skinId = skin._id;


               if (skin !== null) {
                  for (let cooperativeCollection of collections) {
                     // for (let cooperativeSkin of cooperativeCollection.skins[rarities[r]]) {
                     // if (cooperativeSkin._id !== skinId && cooperativeCollection.skins[rarities[r + 1]].length !== 0) {
                     if (cooperativeCollection.skins[rarities[r + 1]].length !== 0) {
                        for (let cooperativeQuality of qualities) {
                           const cooperativeSkin = findCheapestSkin(cooperativeCollection, rarities[r], cooperativeQuality);

                           if (cooperativeSkin !== null) {

                              for (let thirdCollection of collections) {
                                 if (thirdCollection.skins[rarities[r + 1]].length !== 0) {
                                    for (let thirdQuality of qualities) {
                                       const thirdSkin = findCheapestSkin(thirdCollection, rarities[r], thirdQuality)

                                       if (thirdSkin !== null) {

                                          let skinAvgFloat = avg_floats[quality];
                                          let cooperativeSkinAvgFloat = avg_floats[cooperativeQuality];
                                          let thirdSkinAvgFloat = avg_floats[thirdQuality];
                                          if (skinAvgFloat > skin.max_float) skinAvgFloat = skin.max_float;
                                          if (skinAvgFloat < skin.min_float) skinAvgFloat = skin.min_float;
                                          if (cooperativeSkinAvgFloat > cooperativeSkin.max_float) cooperativeSkinAvgFloat = cooperativeSkin.max_float;
                                          if (cooperativeSkinAvgFloat < cooperativeSkin.min_float) cooperativeSkinAvgFloat = cooperativeSkin.min_float;
                                          if (thirdSkinAvgFloat > thirdSkin.max_float) thirdSkinAvgFloat = thirdSkin.max_float;
                                          if (thirdSkinAvgFloat < thirdSkin.min_float) thirdSkinAvgFloat = thirdSkin.min_float;

                                          const avg = Math.round(((amount1 * skinAvgFloat + amount2 * cooperativeSkinAvgFloat + amount3 * thirdSkinAvgFloat) / 10) * 1000) / 1000;
                                          const price = skin.prices[quality];
                                          const cooperativePrice = cooperativeSkin.prices[cooperativeQuality];
                                          const thirdPrice = thirdSkin.prices[thirdQuality];

                                          let targetedSkinsArr = [];
                                          let targetedSkinsNumber = 0;
                                          let total = 0;
                                          let targetedSkinsQuality = []

                                          // SKIN Z ILOSCIĄ RÓWNĄ AMOUNT1
                                          let collName = skin.case;
                                          // COOPERATYWNY SKIN (DOPEŁNIENIOWY) Z ILOSCIĄ RÓWNĄ AMOUNT2
                                          let coopCollName = cooperativeSkin.case;
                                          // COOPERATYWNY SKIN (DOPEŁNIENIOWY TRZECI) Z ILOSCIĄ RÓWNĄ AMOUNT3
                                          let thirdCollName = thirdSkin.case;

                                          let max = 0;
                                          let maxSkin = {};

                                          for (let targetedCollection of collections) {
                                             if (targetedCollection.name == collName || targetedCollection.name == coopCollName || targetedCollection.name == thirdCollName) {
                                                for (let targetedSkin of targetedCollection.skins[rarities[r + 1]]) {

                                                   const { min_float, max_float } = targetedSkin;
                                                   const float = Math.round(((max_float - min_float) * avg + min_float) * 1000) / 1000;
                                                   const targetedQuality = checkQuality(float);

                                                   const targetedPrice = Math.round((targetedSkin.prices[targetedQuality] * steamTax) * 100) / 100;
                                                   targetedSkin.price = targetedPrice;
                                                   if (max < targetedPrice) {
                                                      max = targetedPrice;
                                                      maxSkin = {
                                                         _id: targetedSkin._id,
                                                         name: targetedSkin.name,
                                                         skin: targetedSkin.skin,
                                                         case: targetedSkin.case,
                                                         rarity: targetedSkin.rarity,
                                                         min_float: targetedSkin.min_float,
                                                         max_float: targetedSkin.max_float,
                                                         price: max,
                                                         targetedQuality
                                                      }
                                                   }
                                                   if (targetedCollection.name == collName && targetedCollection.name == thirdCollName) {
                                                      total += targetedPrice * (amount1 + amount3);
                                                      targetedSkinsNumber += 1 * (amount1 + amount3);
                                                   } else if (targetedCollection.name == collName && targetedCollection.name == coopCollName) {
                                                      total += targetedPrice * (amount1 + amount2);
                                                      targetedSkinsNumber += 1 * (amount1 + amount2);
                                                   } else if (targetedCollection.name == coopCollName && targetedCollection.name == thirdCollName) {
                                                      total += targetedPrice * (amount1 + amount3);
                                                      targetedSkinsNumber += 1 * (amount1 + amount3);
                                                   } else if (targetedCollection.name == collName) {
                                                      total += targetedPrice * amount1;
                                                      targetedSkinsNumber += 1 * amount1;
                                                   } else if (targetedCollection.name == coopCollName) {
                                                      total += targetedPrice * amount2;
                                                      targetedSkinsNumber += 1 * amount2;
                                                   } else if (targetedCollection.name == thirdCollName) {
                                                      total += targetedPrice * amount3;
                                                      targetedSkinsNumber += 1 * amount3;
                                                   }

                                                   targetedSkinsQuality.push(targetedQuality);
                                                   targetedSkinsArr.push(targetedSkin);
                                                   counter += 1;
                                                }
                                             }
                                          }






                                          let trades = [];
                                          let addToArr = false;

                                          // for (let targetedSkin of targetedSkinsArr) {

                                          // const targetedSkin = maxSkin;
                                          const inputPrice = amount1 * price + amount2 * cooperativePrice + amount3 * thirdPrice;
                                          if (inputPrice < maxSkin.price) {

                                             // const chance = Math.round(1 / targetedSkinsNumber * 100);
                                             const { min_float, max_float } = maxSkin;
                                             const float = Math.round(((max_float - min_float) * avg + min_float) * 1000) / 1000;
                                             const targetedQuality = checkQuality(float);
                                             // const avgLossPrice = (total - targetedPrice) / (targetedSkinsArr - 1);
                                             // const profitability = Math.round(((inputPrice - targetedPrice) * chance / 100 - (inputPrice - avgLossPrice) * (100 - chance) / 100) * 100) / 100;
                                             // const profitability = Math.round((inputPrice - (total / targetedSkinsNumber)) * 100) / 100;
                                             const avgPrice = total / targetedSkinsNumber;
                                             const profitability = Math.round((avgPrice - inputPrice) * 1000) / 1000;
                                             const returnPercentage = Math.round(((avgPrice) / inputPrice * 100) * 1000) / 1000;

                                             if (skin.skin == 'Condition Zero' && cooperativeSkin.skin == 'Prototype' && quality == 'Minimal Wear' && cooperativeQuality == 'Factory New') {
                                                let xPom = {
                                                   skin,
                                                   cooperativeSkin,
                                                   targetedSkin,
                                                   quality,
                                                   cooperativeQuality,
                                                   targetedQuality,
                                                   price,
                                                   cooperativePrice,
                                                   inputPrice,
                                                   targetedPrice: targetedSkin.price,
                                                   rarity: rarities[r],
                                                   targetedSkinsArr,
                                                   targetedSkinsQuality,
                                                   // chance,
                                                   profitability,
                                                   returnPercentage,
                                                };
                                                x.push(xPom)
                                             }

                                             if (profitability > 0) {
                                                addToArr = true;

                                                const pom = {
                                                   skin,
                                                   cooperativeSkin,
                                                   thirdSkin,
                                                   targetedSkin: maxSkin,
                                                   quality,
                                                   cooperativeQuality,
                                                   thirdQuality,
                                                   targetedQuality,
                                                   price,
                                                   cooperativePrice,
                                                   thirdPrice,
                                                   inputPrice,
                                                   targetedPrice: maxSkin.price,
                                                   rarity: rarities[r],
                                                   targetedSkinsArr,
                                                   targetedSkinsQuality,
                                                   // chance,
                                                   profitability,
                                                   returnPercentage,
                                                }

                                                let correctPosition = false;
                                                let i = 0;
                                                while (!correctPosition && i <= trades.length - 1) {
                                                   if (pom.targetedPrice > trades[i].targetedPrice) {
                                                      let firstHalf = trades.slice(0, i);
                                                      let secondHalf = trades.slice(i);
                                                      trades = [...firstHalf, pom, ...secondHalf];
                                                      correctPosition = true;
                                                   }
                                                   i += 1;
                                                }
                                                if (!correctPosition) {
                                                   trades.push(pom);
                                                   correctPosition = true;
                                                }


                                             }
                                          }
                                          // }


                                          if (addToArr) {
                                             const pom2 = {
                                                trades,
                                                avg,
                                                total,
                                                positiveCases: trades.length,
                                                targetedSkinsNumber
                                             }

                                             if (profits.length <= 2) {
                                                profits.push(pom2);
                                             } else {
                                                let correctPosition = false;
                                                let i = 0;
                                                while (!correctPosition && i <= profits.length - 1) {

                                                   if (pom2.trades[0].returnPercentage > profits[i].trades[0].returnPercentage) {
                                                      let firstHalf = profits.slice(0, i);
                                                      let secondHalf = profits.slice(i);
                                                      profits = [...firstHalf, pom2, ...secondHalf];
                                                      correctPosition = true;
                                                   }
                                                   i += 1;
                                                }
                                                if (!correctPosition) {
                                                   profits.push(pom2);
                                                   correctPosition = true;
                                                }
                                             }

                                          }
                                          counter += 1;
                                       }



                                    }
                                 }
                              }
                           }

                           // counter += 1;
                        }
                        // }
                     }
                  }
               }
            }
         }
      }

   }

   // for (let profit of profits) {
   //    console.log(profit.trades[0].returnPercentage)
   // }
   console.log(x)
   let counterOpt = counter.toLocaleString()
   let positiveResults = profits.length.toLocaleString();

   console.log(counter, positiveResults)
   return { profits, counterOpt, positiveResults, amount: { amount1, amount2, amount3 } };
}